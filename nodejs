const express = require('express')
const {open} = require('sqlite')
const sqlite3 = require('sqlite3')
const path = require('path')

const bcrypt = require('bcrypt')
const jwt = require('jsonwebtoken')
const dbPath = path.join(__dirname, 'twitterClone.db')
const app = express()
app.use(express.json())




let db = null
const intializeDbAndServer = async () => {
  try {
    db = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    })
    app.listen(3000, () => {
      console.log('Server is Running at http://localhost:3000/')
    })
  } catch (error) {
    console.log(`DB Error: ${error.message}`)
  }
}

intializeDbAndServer()
 const getFollowingPeopleIdsOfUser =async(username) =>{
  const getTheFollowingPeopleQuery = `
  select following_user_id from follower INNER JOIN user on user.user_id = follower.follower_user_id where user.ysername ='${username}';`;
  const followingPeople =await db.all(getTheFollowingPeopleQuery);
  const arrayOfIds =followingPeople.map((eachUser) =>eachUser.following_user_id);
  return arrayOfIds;
 }

//JWT Token Verification
const authenticateToken = (request, response, next) => {
  let jwtToken
  const authHeader = request.headers['authorization']

  if (authHeader) {
    jwtToken = authHeader.split(' ')[1]
  }

  if (jwtToken ) {
    jwt.verify(jwtToken,"SECRET_KEY",(error,payload)=>{
      if(error){
        response.status(401)
    response.send('Invalid JWT Token')
      }else{
        request.username=payload.username;
        request.userId=payload.userId;
        next();
      }
    });
   
  } else {
        response.status(401)
        response.send('Invalid JWT Token')
      } 
  };
const tweetAccessVerification =async(request,response,next) =>{
  const {tweetId}=request.params;
  const {userid}=request;
  const getTweetQuery=`
  select * from tweet INNER JOIN follower on tweet.user_id =follower.following_user_id where tweet.tweet_id ='${tweetId}' and follower_user_id ='${userid}';`;
  const tweet =await db.get(getTweetQuery);
  if(tweet===undefined) {
    response.status(401);
    response.send("Invalid Request");
  }else{
    next();
  }
};

//Register API-1
app.post('/register/', async (request, response) => {
  const {username, password, name, gender} = request.body
  const getUserQuery = `select * from user where username = '${username}'`
  const userDBDetails =await db.get(getUserQuery);
  if (userDBDetails !== undefined) {
    response.status(400);
  response.send("User already exists");
    } else {
        if (password.length < 6) {
      response.status(400)
      response.send('Password is too short');
        }
        else{
      const hashedPassword = await bcrypt.hash(password, 10)
      const createUserQuery = `insert into user( username, password,name, gender)
               values (
                
                '${username}',
                '${hashedPassword}','${name}',
                '${gender}'
               );`

      await db.run(createUserQuery)
     
      response.send('User created successfully')
    }
  } 
  }
);


//Login API-2
app.post('/login/', async (request, response) => {
  const {username, password} = request.body
  const selectUserQuery = `select * from user where username = '${username}'`
  const dbUser = await db.get(selectUserQuery)

  if (dbUser !== undefined) {
     const isPasswordMatched = await bcrypt.compare(password, dbUser.password);
    if (isPasswordMatched === true) {
      const jwtToken = jwt.sign(dbUser, 'secret')
      response.send({jwtToken})
  } else {
       response.staus(400)
    response.send('Invalid password')
    } }
    else {
      response.status(400)
      response.send('Invalid user')
    }
  }
)

//API-3
app.get('/user/tweets/feed/', authenticateToken, async (request, response) => {
  const {payload} = request;
  const followingPeopleIds =await getFollowingPeopleIdsOfUser(username);

  const getTweetsFeedQuery = `select username,tweet,date_time AS dateTime
       from user INNER JOIN tweet ON user.user_id = tweet.user_id 
       where user.user_id IN (${followingPeopleIds})
       order by date_time DESC
       limit 4;`
  const tweets = await db.all(getTweetsFeedQuery)
  response.send(tweets)
})

//API-4
app.get('/user/following/', authenticateToken, async (request, response) => {
  const {username,userId} = request
  
  const userFollowQuery = `select name from follower INNER JOIN user ON user.user_id = follower.following_user_id where follower_user_id = '${userId}';`;
  const userFollowArray = await db.all(userFollowQuery)
  response.send(userFollowArray)
})

//API-5
app.get('/user/followers/', authenticateToken, async (request, response) => {
  const {username,userId} = request;
  
  const userFollowersQuery = `select DISTINCT name from follower INNER JOIN user ON user.user_id = follower.follower_user_id where following_user_id = '${userId}';`;
  const userFollowersArray = await db.all(userFollowersQuery)
  response.send(userFollowersArray)
})

//API-6
app.get('/tweets/:tweetId/', authenticateToken,tweetAccessVerification, async (request, response) => {
  const {username,userId}=request;
  const {tweetId} = request.params;
  const tweetsQuery = `select * from tweet where tweet_id = ${tweetId}`
  const tweetsResult = await db.get(tweetsQuery)
  //response.send(tweetsResult);
  const userFollowersQuery = `select tweet, (SELECT COUNT() from Like where tweet_id ='${tweetId}') As likes,
  (SELECT COUNT() from reply where tweet_id='${tweetId}') AS replies,
  date_time AS dateTime from tweet where tweet.tweet_id='${tweetId}';`;

  const userFollowers = await db.all(userFollowersQuery);
  response.send(tweet);
  
  }
);

//API-7
app.get(
  '/tweets/:tweetId/likes/',
  authenticateToken,tweetAccessVerification,
  async (request, response) => {
    const {tweetId} = request.params;
  
    const getLikedUsersQuery = `select username from user INNER JOIN like ON user.user_id = like.user_id 
 
   where tweet_id = '${tweetId}';`;
    const likedUsers = await db.all(getLikedUsersQuery)
  const usersArray =likedUsers.map((eachUser) =>eachUser.username);
  response.send({likes:usersArray});
   
  }
);

//API-8
app.get(
  '/tweets/:tweetId/replies/',
  authenticateToken,tweetAccessVerification,
  async (request, response) => {
    const {tweetId} = request.params;
    const getRepliedUsersQuery = `select name,reply  from user INNER JOIN  reply ON user.user_id = reply.user_id 

   where tweet_id = '${tweetId}';`;
    const repliedUsers = await db.all(getRepliedUsersQuery);
    response.send({replies:repliedUsers});
    
  }
);

//API-9
app.get('/user/tweets/', authenticateToken, async (request, response) => {
  const {userId} = request;

  const getTweetsDetailsQuery = `select tweet, COUNT(DISTINCT like-id) AS likes,
  COUNT(DISTINCT reply_id) AS replies,
  date_time AS dateTime 
  from tweet LEFT JOIN reply ON tweet.tweet_id=reply.tweet_id LEFT JOIN  like On tweet.tweet_id =like.tweet_id 

          
          where tweet.user_id = '${userId}'; 
          
    `;
  const tweetDetails = await db.all(getTweetsDetailsQuery)
  response.send(tweetDetails)
});

//API-10
app.post('/user/tweets/', authenticateToken, async (request, response) => {
  const {tweet} = request.body;
  const userId=parseInt(request.userId);
  const dateTime =new Date().toJSON().substring(0,19).replace("T"," ");

  const postTweetQuery = `insert into tweet(tweet, user_id,date_time) values('${tweet}', '${userId}','${dateTime}');
    `;
  await db.run(postTweetQuery)
  response.send('Created a Tweet')
});

//API-11
app.delete('/tweets/:tweetId/', authenticateToken, async (request, response) => {
  const {tweetId} = request.params;
  const {userId} = request;
  

  const selectUserQuery = `select * from tweet where user_id = '${userId}' and tweet_id = '${tweetId}';`;
  const tweetUser = await db.all(selectUserQuery)
console.log(tweet);
  if (tweetUser===undefined) {

 response.status(401)
    response.send('Invalid Request')
    
  } else {
    const deleteTweetQuery = `delete from tweet where tweet_id= '${tweetId}';`;
    await db.run(deleteTweetQuery);
    response.send("Tweet Removed");
  };
});

module.exports = app;
